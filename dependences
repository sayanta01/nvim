#!/bin/sh

distro=$(grep ID= /etc/os-release | sed -n 2p | cut -d= -f2)

if [ "$distro" = "debian" ] || [ "$distro" = "ubuntu" ] || [ "$distro" = "kali" ]; then
	printf "Build neovim? (yes/no): "
	read -r choice
	if [ "$choice" = "yes" ]; then
		sudo apt install -y ninja-build gettext
		git clone https://github.com/neovim/neovim.git ~/.cache/neovim
		cd ~/.cache/neovim || exit 1
		make -j4 && sudo make install
	else
		:
	fi

	## pkgs
	sudo apt install -y npm cargo luarocks \
		golang php ruby \
		shellcheck ripgrep \
		python3-pip python3-venv \
		default-jdk dotnet-sdk-6.0
	# wget https://dot.net/v1/dotnet-install.sh -O dotnet-install.sh
	# chmod +x ./dotnet-install.sh && ./dotnet-install.sh --version latest

	printf "Install cargo pkgs? (yes/no): "
	read -r choice
	if [ "$choice" = "yes" ]; then
		cargo install procs bat
	else
		:
	fi

	# curl -Lo lazygit.tar.gz "https://github.com/jesseduffield/lazygit/releases/latest/download/lazygit_${LAZYGIT_VERSION}_Linux_x86_64.tar.gz" && sudo tar xf lazygit.tar.gz -C /usr/local/bin lazygit
	# wget -q https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb && sudo dpkg -i cloudflared-linux-amd64.deb

	# julia
	## curl -s https://api.github.com/repos/JuliaLang/julia/releases | grep -oP '"tag_name": "\K(.*?)(?=")' # check version
	printf "Want to install julia? (yes/no): "
	read -r choice
	if [ "$choice" = "yes" ]; then
		wget https://julialang-s3.julialang.org/bin/linux/x64/1.8/julia-1.8.5-linux-x86_64.tar.gz
		tar -xvzf julia-1.8.5-linux-x86_64.tar.gz
		sudo mv julai-1.8.5 /opt/
		sudo ln -s /opt/julia-1.8.5/bin/julia /usr/local/bin/julia
	else
		:
	fi
else
	:
fi

distro=$(lsb_release -a | grep 'Distributor ID' | cut -f 2)
if [ "$distro" = "Artix" ]; then
	sudo pacman -S --noconfirm npm cargo luarocks \
		go php ruby julia \
		shellcheck ripgrep \
		jdk-openjdk dotnet-sdk \
		lazygit cloudflared

	# paru -S codelldb
else
	:
fi

## node dependences
sudo npm i -g tree-sitter-cli live-server
# git clone https://github.com/tapio/live-server ~/.local/share/live-server
# cd ~/.local/share/live-server && npm install

## python dependences
pip install pynvim

## rust setup
curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
# cargo new project  # get started with rust
rustup component add rust-analyzer rustfmt # run this in project directory, maybe it's not necessary

## kotlin setup
curl -s "https://get.sdkman.io" | bash
# sdk install kotlin # run this

## delve for go-dap
# go install github.com/go-delve/delve/cmd/dlv@latest

## java-dap setup
# INSTALL_FOLDER="$HOME/.local/share/nvim"
## -i java-debug
# rm -rf "$INSTALL_FOLDER/java-debug"
# git clone https://github.com/microsoft/java-debug.git "$INSTALL_FOLDER/java-debug"
# cd "$INSTALL_FOLDER/java-debug" && ./mvnw clean install
## -i vscode-java-test
# rm -rf "$INSTALL_FOLDER/vscode-java-test"
# git clone https://github.com/microsoft/vscode-java-test.git "$INSTALL_FOLDER/vscode-java-test"
# cd "$INSTALL_FOLDER/vscode-java-test" && npm install && npm run build-plugin
